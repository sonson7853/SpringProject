<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- 
		주소 자동완성 도구
		매번 같은주소(/WEB-INF/views/)를 추가해야하기 때문에 자동완성이 기본적으로 등록되어있음
		- view resolver라는 도구를 등록(spring 제공)
		- class : InternalResourceViewResolver
		- prefix : 접두어 / suffix : 접미어
		- return할 파일명을 제시하는 부분에 접두어, 접미어를 붙여서 forward 하겠다.
	 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		base-package에 등록된 패키지와 그 하위 패키지 모두 감시(scan)해서 빈으로 등록가능한 클래스들은 spring-bean으로 등록해줌
	 -->
	
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- 
		Interceptor : 컨트롤러에 요청이 들어가기 전/후를 나눠서 인터셉터가 중간에 요청을 가로챔.
					  스프링의 모든 빈객체에 접근이 가능하며, 일반적으로 로그인체크, 권한체크, 프로그램실행시간체크등에 사용된다.	
	 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
				<beans:bean class="com.kh.spring.common.interceptor.BoardTypeInterceptor"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
				<beans:bean class="com.kh.spring.common.interceptor.LoggingInterceptor"/>
		</mvc:interceptor>	
	</mvc:interceptors>
	
	<!-- 인터셉터특징
		1. Interceptor는 dispatcherServlet이 controller를 호출하기 전/후로 끼어들기 때문에
		controller에 전달하기전인 Request와 response의 데이터를 처리하기에 좋고, application전역에 사용하는
		객체에 대한 설정을 하기에도 좋음.
		
		2. AOP는 주로 트랜잭션처리(@Transactional), 로깅처리등 비즈니스단의 메서드에서 더 세밀하게 조정하고 싶을때 사용하면됨.
		
		인터셉터와 aop를 종합해보면, 
		컨트롤러에 공통적으로 적용할 부가기능이라면 핸들러 인터셉터는 이용하는게 좋고,
		더 세밀하게 조정하고싶다면 AOP를 사용하는게 좋음.
		
		스프링 요청/응답 흐름
		
		요청(reqeust) -> Filter -> DispatcherServlet(HandlerMapping) -> Interceptor -> Controller -> AOP -> SERVICE -> DAO -> DB
		
		응답           <- Filter <- DispatcherServlet(ViewResolver) <- Intercepotr <- Controller <- AOP <- SERVICE <- DAO <- DB 
	 -->
	
	<aop:aspectj-autoproxy proxy-target-class="false"/>
	<!-- 
		proxy-target-class : 프록시라는 객체를 생성할때, interface or class로 프록시 객체를 생성할지를 정하는 구문임
		기본값 : true -> 프록시 객체를 생성시 클래스로 만들어줌.
		일반적으로 프록시 객체는 자바에서 기본적으로 제공하는 다이나믹 프록시 interface로 생성함.
		클래스로 생성하게 되면 cglib라이브러리를 이용해서 프록시 객체를 생성하는데 이슈가 있어서 사용하지 않는걸 권장함.
	 -->
	
	<!--
	 트랜젝션처리 시 필요한 @Transactional 어노테이션 활성화 시키기 
	 @Transactional : 클래스 혹은 메소드 수행후 트랜젝션을 처리하라고 알려주는 어노테이션	
	-->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- webSocket요청시 핸들러 클래스와 연결하기 -->
	<beans:bean id="chatHandler" class="com.kh.spring.chat.model.websocket.ChatWebsocketHandler"/>
	
	<websocket:handlers>
		<!-- 웹소켓 요청시 요청주소를 처리할 bean객체 지정 -->
		<websocket:mapping handler="chatHandler" path="/chat"/>
		<websocket:handshake-interceptors>
			<!-- 
				interceptor : http통신에서 request와 response를 가로채는 역할 			
				handshake-interceptores : 요청 관련 데이터중 httpSession정보를 가로채서 webScoketSession안에 넣어줌
			 -->
			 <beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
		
		<!-- SocketJS라이브러리를 이용해서 만들어진 웹소켓 객체임을 의미 -->
		<websocket:sockjs/>
	</websocket:handlers>
	
	<!-- 
		HandlerMapping을 통해서 어떤 url로 요청했을 때 어떤 controller가 구동될것인지를 알아내야함.
		
	 1. 요청때마다 실행될 controlle들을 bean으로 등록시켜두기
	 <beans:bean class="com.kh.spring.board.controller.BoardController" id="loginController"/>
	 <beans:bean class="com.kh.spring.board.controller.BoardController" id="loginController"/>
	 <beans:bean class="com.kh.spring.board.controller.BoardController" id="loginController"/>
	 <beans:bean class="com.kh.spring.board.controller.BoardController" id="loginController"/>
	 <beans:bean class="com.kh.spring.board.controller.BoardController" id="loginController"/>
	 ...(등록할 컨트롤러 개수만큼 bean을 등록시켜줘야함)	 
	 	
	 2. 어떤 url로 요청이 들어온것을 처리할것인지 매핑시켜줘야함.
	 <beans:bean class="org.springframework.web.srevlet.handler.simpleUrlHandlerMapping">
	 	<bean:property name="mappings">
	 		<bean:prop key="login">memberController</bean:prop>
	 		<bean:prop key="insert">memberController</bean:prop>
	 	</bean:property>
	 </beans:bean>
	 
	 위와 같은 방식으로 xml로 빈을 등록을 한다면, bean개수가 너무많아지면 관리가 어려워짐.
	 또한, 여러개발자가 같은 xml파일을 수정하면 충돌이 쉽게 살행할 수 있음.
	 
	 장점 : xml문서내에 한문으로 볼수있기때문에 관리의 편의성이 높음
	 
	 * 어노테이션방식
	 -component-scan에서 지정한 패키지명(com.kh.spring)의 하위모든 클래스를 스캔하여
	 @Controller와 같은 MVC어노테이션이 붙은 클래스를 자동으로 BEAN으로 등록해주는 방식
	 @Service
	 @Repository
	 ...
	 
	 단 내가 직접만든 클래스가 아닐경우(spring에서 제공하는 클래스이거나 컴파일된 class경우)
	 소스코드 내부를 수정할 수 없기때문에, 코드에 어노테이션을 붙힐 수없다.따라서 이경우에는 xml방식으로 bean을
	 등록시켜줘야함.	
	 -->
	 
	 
	 
	 
	 
	 
	 
	 
	 
</beans:beans>
